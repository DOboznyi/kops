Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/amd64/nodeup
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/arm64/nodeup
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/6RUTW/bMAy9+1cQBXrrZDvrik1oD0OCoQXWLkiPQzEoFuMJkUWXktwF2I8fpHy4yS77yCXRe+Sj+EilsRT1lNzKtLIA6JRTLT4GYtXi1Crv0UsIHLFoyAVlHPIiumA6lHBA9EjqpNJkvS8DMhuNEn4WAAADsjfk4AYmRQa+9ja2xvmn7XEExJkhMUqKlvtGDLVo2Jwdgv8s/BX+KvOvcwVvm/ZHIv8uk340T0dSADvyW9j0CDdwIpkyxDA5K06y/usKgvpgKI0ATj6PGx+w09OWKfZws90BAEvtZxzQSjBuRcVhqhJqcSneFpqaNXJaAr82/Z3zQVm726B1XOKc6ccm74iNPiBP72YLCXVViQ9XohJVWdeJ7OMCnyP6kLmuADCdalHC+r0XbcPCUJnk3vRZb6jFpBLV0f0muZ7FkKopR27TUfQfY/guYaWsT900ubsZmwFZgt+2fMAXREFCmS9LUc+ZBqNToHrxYwezh8dtA1eXohJ19YqhThkn90dhqVG2AECnlhZnuIxta1x7q5y2yPt3BoCDadJUbhVrCR12xBuhBmVsyruuq+reXDjSuPJH8PkeNOnbf2LE63fnF9m530L36FFsAZBM277fuUpWlYPi0ppluXOzHANO7AZwGF6I1/O8kA8q/0c4kwhy98o/R2SlcRx5dqwqs2c96XvlzAp92BXG0ORi7DCgL7sd64tfAAAA//8BAAD//w6nesW0BAAA" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7SV227cthaG7+cphAC5iySeD4Nc7OwYbYImQZA+wSK5OBYikVORM4n79IU4nthuCxQF6itR60B++vmTelMK1rLfdR0sQYlt0HcxMsGY1NQLT9Eqq5ArHWVkUijlrIpOoSQ0MgMYmI2CCkclEyBZQCD/u631WPbjWGpe4YDDIefDjHCcyuDzMn49OVwTViz9ijNCwfH6PNOBkYGMbkrjPKXT97FxtZYZa8MDaawkREfOaSQmMCSGoaNMSKOVsMJKaSMnznvpEJApz03kyDQTTDH/THi+zg3Pam2YsJwFqZT2GrgGUMC9cyAIJQSU0Ry1C1aj4WgcGq6Ro4YYCJh/xDOlh7VOEXwtvU/TAx0ZzKBHn6b+OJ8OUyp9g+wbZH9JD/Xwe+NkymrggiEXWntGKThhOOXIpI1BI2cQaJQBA7WcEVSwySoJGOZi5OEH52GqtyfX2HxOFaaEa3g8vOcrY8jf0pwhbDqKgY9+nfqHuu1b+pZ4jD1UWIeGDOtydajQ4JQXTPPouXPEO4PeSqqZpsFSaSzxEpQjKIVj1lLUYKJzqLUjCsV/a4GN64lDmUQhlDSaeGup0qi8UEoxjsFEIoEGRqLzThgPTiljKLHcWCdZMFox/kx4V4cCUh60k55IF6ghCNZJp0wUwgUA7aITlHABDCMNysRgkDJptdVBCRafw6Eb5J8dqpBHQ9AISdE71I5LaZnQmlHPkTHlUDnGDHiAgKiRcmW2Fs8IGvpw0K++G0L2X3FtkBdxSoU6+e3hZhwBVn+rxHgp6xkZKBlI43k7n0rF9RMsuO98Xo4rljLgd1iOM24T7t7mFKfD/6HgvltwidvC/tL1pHD82+73qVRIHn9e8+l4WSXlgOVp4kuecd99ygF3v1z8dlm1XeApp7sln8qbU73ddxHmgruu84et8Wadzrjuu3JXKi7hR/xLznXfjdv7nE/h85rPU9gK4VtpwcZ/8+nXfUcJGZQYNk0eZfICU9pfX4c5e9hMhmkT9Abd6XCY0uEdpDDjWvZdXU8bFZ4nX6ec3sEamlx5vRvgDNO89b2mhHycXm0CxPIk/PIanJo6P62Ir+XLV9MCh7+WXqNPandd185C0+0zbFKNZ1jHeXLXMzw+FOy6bs6HD3jGed+xXdclrN/y+vVzc++9G9K0JXLAD+Bwbn/TyyKXMzpMeVzbxm01LbkN+i02PC3b4vvuxYs2X/oI5bcTrhDw7fubL492gIxtD445fIQ0RSz1/kOw+keXw7jcZ8vO30JKja3/9+YcIYScyuhyrqWucOzvpxvuYJl3fwAAAP//AQAA//8OfccBRAgAAA==" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
