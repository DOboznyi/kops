Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/amd64/nodeup
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/arm64/nodeup
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xW224bNxO+11MQ+ZG7eFdr+0/bRXKhymmtxk5VKYcCRVBQ5GjFiktuhuTaKvrwxZAraSVbSNvcFbUBiZwT5/DNjIS2QY6tWaqqHDBWc8MrmHuLvIKx5s6BK5nHAANhjefKAM6C8aqGku0ocs+UZEVEez+2gKgklOyPAWOMtYBOWcNesvNBJPzS6FAp4z6m656QPVE225vMKmxE1haZQPVkJ/zXxHv0nubf1s0wBe0OjPxzM3QQHw9MMdYxf/WbBthLdmSSNLL2/MngSOuLXMhs45WlErCjv/nGeajluEIbGvYyYYAxbasbaEGXTJmlHeyqWrIiu8wuBtKKNSCBwK1VMzHOc607BIERuInvdYBjJmg9AC/kWAfnAR0pQgvGx1PP+kV2mRUXEaHKPM5bhwWMppM5YJs84FrbuymqVmmoQJbbGLixZlPb4EbBr0q25NpFcqNGQSowAuLrZ4wsogEPLnOtyCQsedA+iaZnxjYYX7KCaMGvLKrfOQV4awn3I33HN25EbgwYWygjR1IiOFeyYRb/qVmoA6doWyUBS8bvHOXA8IWGkayVoxinqcTJqze8BtdwATdqCWIjNETyjaqVn3FTAcY7OagEjIQgHyNpShlzHox/b3Wo4YYvQEfOVQqt3/h9+lurAWNgcxDWyMS8DZ57Zaqdmx9gsbJ2HZnvuVbyNPuNlTAD51EJMhtpM3A2oICfgvWckuCFTGnuIl9535R5Xpx/FbNXlJfDYXEouB06nUaewPS/xzTPB4ypmldQsvXXLqsEZsrmVPMz3iiXYNQW2XmqEzE0+CnCEhBhW8q3m2b72MR4QMP1ZBqv19Z5w+tUnVf3Pd6+icgHhE8BnF8Bl4ARLCBjjZNVXlUIFfcWj2Vf3Xvk1/FIXqn7rcrPZzOorYezKHF2rPc9tXTSO1aIrGP5d45cr+FxFeJSu4MICFOLvmSXlxeR0gfgxLlA+KZKuDLPeaMyYeuGcpjBPa8bDUR4oPjDh9fzd7PJ5zVz24BRMm+L/Le7tdsb6obLZBq7o2TFcJg9vyQg5HGkuIT6b7lYg5FlhFMaJ2NrPFqtAW/jYtyNFcE9EITHk6uZ2w8W77lYXQF9zqhRhNIw3xgxBVRWlqyoh+5Uy4vkJVlMLn7zPLlY7JkEC9q7j6Ytbd2AMCbzMxs87e7tdDuBdLGL8KzuQtxDXieYaYg9mqZuj1Y+XAqE5+DgcPaMESQYr7jepoqenqK935SfDbwJs4TFyKtPR9JEez3ne06RwFysQAadanjChtvJfFkSullRnl42Iu7VK1Q0ZJhLy3ZHn1nrS5Z/BipXb+Y9MBfDHsfGNbm9ZgRYvVsrV7AIVaVMdc2N1NTR2xigTeP4mqMsWQ21xU3GW6406b0ohsNb9cxYCUt3QH66JSr6dt8hwIv/P30Ws/xAdEs9kO0GbMLwlFOq8pZjrtUi77KZ7wUeYM6Av7O4Tnuy6xKjiGHNLXefAiBP3XrY/pSzxspbbtQSnO8eBi/y/e7P647rBjWndL7+r7r/yurS2qvo9xF2s4KC2hb1TwAAAP//AQAA///BEbMqKQ0AAA==" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/8RW3a7jthG+P08hBMhdJPGflJGLplm0WTQbLDZPMCSHtnBk0SVpb06eviD9c+x0F23TbHslifxm5uPMNyN+lzOWvHnqOth7JepL34XABGNSUyccxUlNCrnSQQYmhVJ2UsEqlIQGZgA9m4KgwlLJBEjmEcifdqUc8mYcc4kJtjhsY9wuCIc5Dy7ux+ejxbRiwdwnXBAyjtfniQ6MDGS08zou83r8ZWy8msmCpdEDaSZJiA6c00CMZ0gMQ0uZkEYrMYlJyilwYp2TFgGZctwEjkwzwRRzX4ieK0ujN2ltmJg481Ip7TRwDaCAO2tBEEoIKKM5ausnjYajsWi4Ro4agidg/iU9k3tIZQ7gSu7dOr+yI4MZ9OjWuT8sx+285r6R7BvJ/rw9lO2vjSdTkwYuGHKhtWOUghWGU45MTsFr5Aw8DdKjpxNnBBXUtEoChtkQuL/x3M5ld7SNm4trgXnF5O9fL/zy6OPHdYngax7FwEeX5v4VV8/St4172kOBNDTKkPZXhQoNVjnBNA+OW0ucNegmSTXT1E9Umok4CcoSlMKyaaKowQRrUWtLFIo/VgKV14NCmUQhlDSauGmiSqNyQinFOHoTiATqGQnWWWEcWKWMoWTiZrKSeaMV41+I3lWhgJR7baUj0npqCMJkpVUmCGE9gLbBCkq4AIaBemWCN0iZnPSkvRIsfAmFVpK/VahCHgxBIyRFZ1FbLuXEhNaMOo6MKYvKMmbAAXhEjZQrU00cI2joa6NfdTf46J4xNZLn5OQCZXb1YRccAZLbKTGeYT0jAyUDaXy+X465YPoJ9rjpXNwfEuY84C+wPyxYHT59H9cwb/8MGTfdHvehBnZnqwfg+Enrt2susDr8a4rHwznKHqptf8x9wVx6Co+gD3HBTfeugZ7+dlbfmUMb52tcX/bxmL87lt2mC7BkfOo6t62mb9J8wrTp8ksuuPe39Q8xlk031u8lHv37FE+zr0D4mNtiO82bn37edJSQQYmhZuhuJ+5hXjfXz2GJDqrkcK3pfYP2uN3O6/YHWP2CKW+6ko6VFZ5mV+a4/gDJt+TF9DLACeal2n1LCXk3f7NGjyE/LH99XZzrM/8lIX4rv/5m3sP2n6HX1QfsU9e1zmh5ew81VeMJ0rjM9trR4yvgqeuWuP0RT7hsOvbUdSuWjzE9v29avmhjnetG9PgjWFzav7XrnuMhD88mD3Mc63sbeykuC6b+8Dxvuq++OuNunV2RqZX4rIO2Xd32dXV4BF689YcFVrw5+xz67PACW+P6DvLfj5jA4/dv33y4qy0ZW3UP0b+DdQ6YyyVFWNzdEBr3l90qkoTbubr/2e3QH1v6r/JzO1jXlpL+P++QEbyPax5tjCWXBIf+4m54gf3yhMXdSP7OALdT1OP5sUr57PsPcIYnXEs+uzukWGLN3tuqyIe7V9ftIO82nUHFvPDUOmBcW8OoIIw4TaUHQaUNPDgXwForkVDLPdeUeYPe0knKwM/lb3q8RdvQgdGB9LAcdjDQBsnxmBxeNNp313l5G95Xydp5hTRjbtodHx2NrbHyeAv02//2vee7u8KdfprXT94SPhGo/7cC1f3j4cSGzAfYw69xhY+Xv9PvOMLt6nEtEKE4YTBWMikcchaM955xAKO4Vx6kpUJbawQwpbnDICcHJDjNA7OTC//nAtXj/E8K9PlA/22B7j2f/+IP7f+ML5vujDzMGdMJU79DWMrO7dA916nWRtlrn16uAp+3OXfvPwAAAP//AQAA//+yA9M9Mg0AAA==" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
